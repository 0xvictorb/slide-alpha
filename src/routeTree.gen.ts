/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CreateImport } from './routes/create'
import { Route as ChatImport } from './routes/chat'
import { Route as IndexImport } from './routes/index'
import { Route as SearchIndexImport } from './routes/search/index'
import { Route as ProfileIndexImport } from './routes/profile/index'
import { Route as ProfileAddressIndexImport } from './routes/profile/$address/index'
import { Route as SearchContentContentIdImport } from './routes/search/content.$contentId'
import { Route as ProfileAddressContentContentIdImport } from './routes/profile/$address/content.$contentId'

// Create/Update Routes

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const ChatRoute = ChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SearchIndexRoute = SearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIndexRoute = ProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileAddressIndexRoute = ProfileAddressIndexImport.update({
  id: '/profile/$address/',
  path: '/profile/$address/',
  getParentRoute: () => rootRoute,
} as any)

const SearchContentContentIdRoute = SearchContentContentIdImport.update({
  id: '/search/content/$contentId',
  path: '/search/content/$contentId',
  getParentRoute: () => rootRoute,
} as any)

const ProfileAddressContentContentIdRoute =
  ProfileAddressContentContentIdImport.update({
    id: '/profile/$address/content/$contentId',
    path: '/profile/$address/content/$contentId',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexImport
      parentRoute: typeof rootRoute
    }
    '/search/content/$contentId': {
      id: '/search/content/$contentId'
      path: '/search/content/$contentId'
      fullPath: '/search/content/$contentId'
      preLoaderRoute: typeof SearchContentContentIdImport
      parentRoute: typeof rootRoute
    }
    '/profile/$address/': {
      id: '/profile/$address/'
      path: '/profile/$address'
      fullPath: '/profile/$address'
      preLoaderRoute: typeof ProfileAddressIndexImport
      parentRoute: typeof rootRoute
    }
    '/profile/$address/content/$contentId': {
      id: '/profile/$address/content/$contentId'
      path: '/profile/$address/content/$contentId'
      fullPath: '/profile/$address/content/$contentId'
      preLoaderRoute: typeof ProfileAddressContentContentIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/create': typeof CreateRoute
  '/profile': typeof ProfileIndexRoute
  '/search': typeof SearchIndexRoute
  '/search/content/$contentId': typeof SearchContentContentIdRoute
  '/profile/$address': typeof ProfileAddressIndexRoute
  '/profile/$address/content/$contentId': typeof ProfileAddressContentContentIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/create': typeof CreateRoute
  '/profile': typeof ProfileIndexRoute
  '/search': typeof SearchIndexRoute
  '/search/content/$contentId': typeof SearchContentContentIdRoute
  '/profile/$address': typeof ProfileAddressIndexRoute
  '/profile/$address/content/$contentId': typeof ProfileAddressContentContentIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/create': typeof CreateRoute
  '/profile/': typeof ProfileIndexRoute
  '/search/': typeof SearchIndexRoute
  '/search/content/$contentId': typeof SearchContentContentIdRoute
  '/profile/$address/': typeof ProfileAddressIndexRoute
  '/profile/$address/content/$contentId': typeof ProfileAddressContentContentIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/create'
    | '/profile'
    | '/search'
    | '/search/content/$contentId'
    | '/profile/$address'
    | '/profile/$address/content/$contentId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/create'
    | '/profile'
    | '/search'
    | '/search/content/$contentId'
    | '/profile/$address'
    | '/profile/$address/content/$contentId'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/create'
    | '/profile/'
    | '/search/'
    | '/search/content/$contentId'
    | '/profile/$address/'
    | '/profile/$address/content/$contentId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRoute: typeof ChatRoute
  CreateRoute: typeof CreateRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
  SearchContentContentIdRoute: typeof SearchContentContentIdRoute
  ProfileAddressIndexRoute: typeof ProfileAddressIndexRoute
  ProfileAddressContentContentIdRoute: typeof ProfileAddressContentContentIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRoute: ChatRoute,
  CreateRoute: CreateRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  SearchContentContentIdRoute: SearchContentContentIdRoute,
  ProfileAddressIndexRoute: ProfileAddressIndexRoute,
  ProfileAddressContentContentIdRoute: ProfileAddressContentContentIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chat",
        "/create",
        "/profile/",
        "/search/",
        "/search/content/$contentId",
        "/profile/$address/",
        "/profile/$address/content/$contentId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/chat": {
      "filePath": "chat.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    },
    "/search/content/$contentId": {
      "filePath": "search/content.$contentId.tsx"
    },
    "/profile/$address/": {
      "filePath": "profile/$address/index.tsx"
    },
    "/profile/$address/content/$contentId": {
      "filePath": "profile/$address/content.$contentId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
